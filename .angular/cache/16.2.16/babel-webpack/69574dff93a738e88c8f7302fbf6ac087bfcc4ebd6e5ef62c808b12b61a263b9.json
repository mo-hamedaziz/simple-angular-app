{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport * as i0 from \"@angular/core\";\nexport class RainbowTextDirective {\n  constructor() {\n    this.colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];\n    this.color = 'black';\n    this.borderColor = 'black';\n  }\n  changeColor() {\n    const randomIndex = Math.floor(Math.random() * this.colors.length);\n    const randomColor = this.colors[randomIndex];\n    this.color = randomColor;\n    this.borderColor = randomColor;\n  }\n  onKeyUp() {\n    this.changeColor();\n  }\n  static {\n    this.ɵfac = function RainbowTextDirective_Factory(t) {\n      return new (t || RainbowTextDirective)();\n    };\n  }\n  static {\n    this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: RainbowTextDirective,\n      selectors: [[\"\", \"appRainbowText\", \"\"]],\n      hostVars: 4,\n      hostBindings: function RainbowTextDirective_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵstyleProp(\"color\", ctx.color)(\"border-color\", ctx.borderColor);\n        }\n      }\n    });\n  }\n}\n__decorate([HostListener('keyup')], RainbowTextDirective.prototype, \"onKeyUp\", null);","map":{"version":3,"names":["RainbowTextDirective","constructor","colors","color","borderColor","changeColor","randomIndex","Math","floor","random","length","randomColor","onKeyUp","selectors","hostVars","hostBindings","RainbowTextDirective_HostBindings","rf","ctx","__decorate","HostListener"],"sources":["C:\\Users\\AZIZ\\Desktop\\simple-angular-app\\src\\app\\rainbow-text.directive.ts"],"sourcesContent":["import { Directive, HostBinding } from '@angular/core';\n\n@Directive({\n  selector: '[appRainbowText]'\n})\nexport class RainbowTextDirective {\n\n  constructor() { }\n\n  private colors: string[] = [\n    'red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'\n  ];\n\n  @HostBinding('style.color') color: string = 'black';\n  @HostBinding('style.borderColor') borderColor: string = 'black';\n\n  private changeColor() {\n    const randomIndex = Math.floor(Math.random() * this.colors.length);\n    const randomColor = this.colors[randomIndex];\n    this.color = randomColor;\n    this.borderColor = randomColor;\n  }\n\n  @HostListener('keyup') onKeyUp() {\n    this.changeColor();\n  }\n\n}\n"],"mappings":";;AAKA,OAAM,MAAOA,oBAAoB;EAE/BC,YAAA;IAEQ,KAAAC,MAAM,GAAa,CACzB,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAC/D;IAE2B,KAAAC,KAAK,GAAW,OAAO;IACjB,KAAAC,WAAW,GAAW,OAAO;EAP/C;EASRC,WAAWA,CAAA;IACjB,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,IAAI,CAACP,MAAM,CAACQ,MAAM,CAAC;IAClE,MAAMC,WAAW,GAAG,IAAI,CAACT,MAAM,CAACI,WAAW,CAAC;IAC5C,IAAI,CAACH,KAAK,GAAGQ,WAAW;IACxB,IAAI,CAACP,WAAW,GAAGO,WAAW;EAChC;EAEuBC,OAAOA,CAAA;IAC5B,IAAI,CAACP,WAAW,EAAE;EACpB;;;uBApBWL,oBAAoB;IAAA;EAAA;;;YAApBA,oBAAoB;MAAAa,SAAA;MAAAC,QAAA;MAAAC,YAAA,WAAAC,kCAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;;;;;;;AAkBRE,UAAA,EAAtBC,YAAY,CAAC,OAAO,CAAC,C,kDAErB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}